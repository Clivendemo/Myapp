import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart'; // Import Firebase Core
import 'package:firebase_auth/firebase_auth.dart'; // Import Firebase Auth
import 'package:edunjema3/firebase_options.dart'; // Generated by FlutterFire CLI

import 'package:edunjema3/screens/forgot_password/forgot_password_screen.dart';
import 'package:edunjema3/screens/login/login_screen.dart';
import 'package:edunjema3/screens/register/register_screen.dart';
import 'package:edunjema3/screens/home/home_screen.dart'; // Import HomeScreen
import 'package:edunjema3/services/auth_service.dart'; // Import AuthService
import 'package:edunjema3/utils/constants.dart';

/// The main entry point of the Flutter application.
void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Ensure Flutter binding is initialized
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform, // Initialize Firebase
  );
  runApp(const MyApp());
}

/// The root widget of the application, defining the theme and initial route.
class MyApp extends StatelessWidget {
  /// Creates a [MyApp] instance.
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'edunjema3 Lesson Planner',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primaryColor: AppConstants.primaryColor,
        hintColor: AppConstants.accentColor,
        scaffoldBackgroundColor: AppConstants.backgroundColor,
        fontFamily: 'Roboto', // You can choose a custom font if desired
        appBarTheme: const AppBarTheme(
          backgroundColor: AppConstants.primaryColor,
          foregroundColor: Colors.white,
          centerTitle: true,
          elevation: 0,
        ),
        inputDecorationTheme: InputDecorationTheme(
          labelStyle: AppConstants.bodyText1.copyWith(color: AppConstants.primaryColor),
          hintStyle: AppConstants.bodyText2,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(AppConstants.smallPadding),
            borderSide: const BorderSide(color: AppConstants.primaryColor),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(AppConstants.smallPadding),
            borderSide: const BorderSide(color: AppConstants.accentColor, width: 2.0),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(AppConstants.smallPadding),
            borderSide: BorderSide(color: AppConstants.primaryColor.withOpacity(0.5)),
          ),
          errorBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(AppConstants.smallPadding),
            borderSide: const BorderSide(color: AppConstants.errorColor),
          ),
          focusedErrorBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(AppConstants.smallPadding),
            borderSide: const BorderSide(color: AppConstants.errorColor, width: 2.0),
          ),
          contentPadding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 12.0),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppConstants.primaryColor,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 24.0),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(AppConstants.smallPadding),
            ),
            textStyle: AppConstants.buttonTextStyle,
          ),
        ),
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(
            foregroundColor: AppConstants.primaryColor,
            textStyle: AppConstants.bodyText2.copyWith(fontWeight: FontWeight.bold),
          ),
        ),
        cardTheme: CardThemeData(
          color: AppConstants.cardColor,
          elevation: 4,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(AppConstants.mediumPadding),
          ),
        ),
        snackBarTheme: SnackBarThemeData(
          backgroundColor: AppConstants.primaryColor,
          contentTextStyle: AppConstants.bodyText1.copyWith(color: Colors.white),
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(AppConstants.smallPadding)),
        ),
      ),
      home: const AuthWrapper(), // Use AuthWrapper to manage auth state
    );
  }
}

/// A wrapper widget that listens to Firebase authentication state changes
/// and navigates between the authentication flow and the home screen.
class AuthWrapper extends StatelessWidget {
  /// Creates an [AuthWrapper] instance.
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: AuthService().user, // Listen to authentication state changes
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          // Show a loading indicator while checking auth state
          return const Scaffold(
            body: Center(
              child: CircularProgressIndicator(color: AppConstants.primaryColor),
            ),
          );
        } else if (snapshot.hasData && snapshot.data != null) {
          // User is logged in, show the home screen
          return const HomeScreen();
        } else {
          // User is not logged in, show the authentication flow
          return const AuthFlowWrapper();
        }
      },
    );
  }
}

/// A wrapper widget to manage the authentication flow (Login, Register, Forgot Password).
class AuthFlowWrapper extends StatefulWidget {
  /// Creates an [AuthFlowWrapper] instance.
  const AuthFlowWrapper({super.key});

  @override
  State<AuthFlowWrapper> createState() => _AuthFlowWrapperState();
}

class _AuthFlowWrapperState extends State<AuthFlowWrapper> {
  /// Represents the current authentication screen being displayed.
  /// 0: LoginScreen, 1: RegisterScreen, 2: ForgotPasswordScreen
  int _currentAuthScreen = 0;

  /// Navigates to the login screen.
  void _showLogin() {
    setState(() {
      _currentAuthScreen = 0;
    });
  }

  /// Navigates to the registration screen.
  void _showRegister() {
    setState(() {
      _currentAuthScreen = 1;
    });
  }

  /// Navigates to the forgot password screen.
  void _showForgotPassword() {
    setState(() {
      _currentAuthScreen = 2;
    });
  }

  @override
  Widget build(BuildContext context) {
    switch (_currentAuthScreen) {
      case 0:
        return LoginScreen(
          onRegisterTap: _showRegister,
          onForgotPasswordTap: _showForgotPassword,
        );
      case 1:
        return RegisterScreen(
          onLoginTap: _showLogin,
        );
      case 2:
        return ForgotPasswordScreen(
          onLoginTap: _showLogin,
        );
      default:
        return LoginScreen(
          onRegisterTap: _showRegister,
          onForgotPasswordTap: _showForgotPassword,
        );
    }
  }
}
